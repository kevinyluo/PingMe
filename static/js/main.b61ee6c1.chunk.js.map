{"version":3,"sources":["components/MessageForm.js","components/MyMessage.js","components/TheirMessage.js","components/ChatFeed.js","App.js","index.js"],"names":["MessageForm","props","useState","value","setValue","chatId","creds","handleSubmit","e","preventDefault","text","trim","length","sendMessage","className","onSubmit","placeholder","onChange","target","isTyping","htmlFor","PictureOutlined","type","multiple","id","style","display","files","SendOutlined","MyMessage","message","attachments","src","file","alt","float","marginRight","color","backgroundColor","TheirMessage","lastMessage","isFirstMessage","sender","username","backgroundImage","avatar","marginLeft","ChatFeed","chats","activeChat","userName","messages","chat","renderReadReceipts","isMyMessage","console","log","people","map","person","index","last_read","keys","Object","key","lastMessageKey","width","margineLeft","renderMessages","height","App","projectID","userSecret","renderChatFeed","chatAppProps","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b61ee6c1.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport {sendMessage, isTyping} from 'react-chat-engine'\r\nimport { sendOutlined, PictureOutlined, SendOutlined } from '@ant-design/icons'\r\n\r\nconst MessageForm = (props) => {\r\n    const [value, setValue] = useState('');\r\n    const {chatId, creds} = props;\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        const text=value.trim();\r\n\r\n        if(text.length > 0) \r\n            sendMessage(creds, chatId, {text})\r\n        \r\n        setValue('')\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n        setValue(e.target.value)\r\n\r\n        isTyping(props, chatId)\r\n    }\r\n\r\n    const handleUpload = (e) => {\r\n        sendMessage(creds, chatId, {files: e.target.files, text: ''})\r\n    }\r\n\r\n    return (\r\n        <form className=\"message-form\" onSubmit={handleSubmit}>\r\n            <input\r\n                className=\"message-input\"\r\n                placeholder=\"Send a message...\"\r\n                value={value}\r\n                onChange={handleChange}\r\n                onSubmit={handleSubmit}\r\n            />\r\n            <label htmlFor=\"upload-button\">\r\n                <span  className=\"image-button\">\r\n                    <PictureOutlined className=\"picture-icon\"/>\r\n                </span>\r\n                <input\r\n                    type=\"file\"\r\n                    multiple={false}\r\n                    id=\"upload-button\"\r\n                    style={{ display: 'none' }}\r\n                    onChange={handleUpload}\r\n                />\r\n                <button type=\"submit\" className=\"send-button\">\r\n                    <SendOutlined className=\"send-icon\"/>\r\n                </button>\r\n            </label>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default MessageForm;","import React from 'react';\r\n\r\nfunction MyMessage({ message }) {\r\n    if(message?.attachments?.length > 0){\r\n        return (\r\n            <img\r\n                src={message.attachments[0].file}\r\n                alt=\"message-attachment\"\r\n                className=\"message-image\"\r\n                style={{ float: 'right' }}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"message\" style={{float: 'right', marginRight: '18px', color: 'black', backgroundColor: '#FFDD05'}}>\r\n            {message.text}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MyMessage;","import React from 'react';\r\n\r\nfunction TheirMessage({lastMessage, message}) {\r\n    const isFirstMessage = !lastMessage || lastMessage.sender.username != message.sender.username\r\n\r\n    return(\r\n        <div className=\"message-row\">\r\n            {isFirstMessage && (\r\n                <div\r\n                    className=\"message-avatar\"\r\n                    style={{backgroundImage: `url(${message?.sender?.avatar})`}}\r\n                />\r\n            )}\r\n            {\r\n                message?.attachments?.length > 0 \r\n                    ? (\r\n                        <img\r\n                            src={message.attachments[0].file}\r\n                            alt=\"message-attachment\"\r\n                            className=\"message-image\"\r\n                            style={{ marginLeft: isFirstMessage ? '4px' : '48px'}}\r\n                        />\r\n                    ) : (\r\n                    <div className=\"message\" style={{float: 'left', backgroundColor: '#CABCDC', marginLeft: isFirstMessage ? '4px' : '48px'}}>\r\n                        {message.text}\r\n                    </div>\r\n                    )\r\n            }\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TheirMessage;","import { EditFilled, LeftCircleFilled } from '@ant-design/icons';\r\nimport React from 'react';\r\nimport { render } from 'react-dom';\r\nimport MessageForm from './MessageForm'\r\nimport MyMessage from './MyMessage'\r\nimport TheirMessage from './TheirMessage'\r\n\r\n\r\nconst ChatFeed = (props) => {\r\n    const { chats, activeChat, userName, messages } = props\r\n    \r\n    const chat = chats && chats[activeChat]\r\n\r\n    const renderReadReceipts = (message, isMyMessage) => {\r\n        console.log(message.text, isMyMessage)\r\n        return chat.people.map((person, index) => person.last_read == message.id && (\r\n            <div\r\n                key={`read_${index}`}\r\n                className=\"read-receipt\"\r\n                style={{\r\n                    float: isMyMessage ? 'right' : 'left',\r\n                    backgroundImage: `url(${person?.person?.avatar})`\r\n                }}\r\n\r\n            />\r\n        ))\r\n    }\r\n\r\n    const renderMessages = () => {\r\n        const keys = Object.keys(messages)\r\n        console.log(keys)\r\n\r\n        return keys.map((key, index) => {\r\n            const message = messages[key]\r\n            const lastMessageKey = index == 0 ? null : keys[index - 1]\r\n            const isMyMessage = userName == message.sender.username\r\n\r\n            return (\r\n                <div key={`msg_${index}`} style={{ width: '100%' }}>\r\n                    <div className=\"message-block\">\r\n                        {\r\n                            isMyMessage ? \r\n                            <MyMessage message={message} /> : \r\n                            <TheirMessage message={message} lastMessage={messages[lastMessageKey]} />\r\n                        }\r\n                    </div>\r\n                    <div className=\"read-receipts\" style={{ marginRight: isMyMessage ? '18px' : '0px', margineLeft: isMyMessage ? '0px' : '68px' }}>\r\n                        {renderReadReceipts(message, isMyMessage)}\r\n                    </div>\r\n\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n    if (!chat) return 'Loading...'\r\n\r\n    return (\r\n        <div className=\"chat-feed\">\r\n            {/* <div className=\"chat-title-container\">\r\n                <div className=\"chat-title\">{chat.title}</div>\r\n                <div className=\"chat-subtitle\">\r\n                    {chat.people.map((person) => ` ${person.person.username}`)}\r\n                </div>\r\n            </div> */}\r\n            {renderMessages()}\r\n            <div style={{ height: '100px' }} />\r\n            <div className=\"message-form-container\">\r\n                <MessageForm {...props} chatId={activeChat} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChatFeed;","import { ChatEngine } from 'react-chat-engine'\nimport ChatFeed from './components/ChatFeed'\nimport './App.css'\n\nconst App = () => {\n  return (\n    <ChatEngine\n      height=\"100vh\"\n      projectID=\"0793f727-d469-4f21-811e-0dbccce0ee9f\"\n      userName=\"kevinyluo\"\n      userSecret=\"joonie707\"\n      renderChatFeed={(chatAppProps) => <ChatFeed { ...chatAppProps}/>}\n    />\n  )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}